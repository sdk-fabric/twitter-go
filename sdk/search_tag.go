
// SearchTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type SearchTag struct {
    internal *sdkgen.TagAbstract
}



// GetRecent 
func (client *SearchTag) GetRecent(query string, startTime string, endTime string, sinceId string, untilId string, sortOrder string, expansions string, maxResults int, mediaFields string, placeFields string, pollFields string, tweetFields string, userFields string) (TweetCollectionResponse, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["query"] = query
    queryParams["start_time"] = startTime
    queryParams["end_time"] = endTime
    queryParams["since_id"] = sinceId
    queryParams["until_id"] = untilId
    queryParams["sort_order"] = sortOrder
    queryParams["expansions"] = expansions
    queryParams["max_results"] = maxResults
    queryParams["media.fields"] = mediaFields
    queryParams["place.fields"] = placeFields
    queryParams["poll.fields"] = pollFields
    queryParams["tweet.fields"] = tweetFields
    queryParams["user.fields"] = userFields

    u, err := url.Parse(client.internal.Parser.Url("/2/tweets/search/recent", pathParams))
    if err != nil {
        return TweetCollectionResponse{}, err
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return TweetCollectionResponse{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TweetCollectionResponse{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return TweetCollectionResponse{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response TweetCollectionResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TweetCollectionResponse{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TweetCollectionResponse{}, errors.New("the server returned an unknown status code")
    }
}



func NewSearchTag(httpClient *http.Client, parser *sdkgen.Parser) *SearchTag {
	return &SearchTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
