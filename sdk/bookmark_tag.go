
// BookmarkTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app


package sdk

import (
    "bytes"
    "encoding/json"
    "errors"
    "github.com/apioo/sdkgen-go"
    "io"
    "net/http"
    "net/url"
    
)

type BookmarkTag struct {
    internal *sdkgen.TagAbstract
}



// GetAll Allows you to get an authenticated user&#039;s 800 most recent bookmarked Tweets.
func (client *BookmarkTag) GetAll(userId string, expansions string, maxResults int, paginationToken string, fields Fields) (TweetCollectionResponse, error) {
    pathParams := make(map[string]interface{})
    pathParams["user_id"] = userId

    queryParams := make(map[string]interface{})
    queryParams["expansions"] = expansions
    queryParams["max_results"] = maxResults
    queryParams["pagination_token"] = paginationToken
    queryParams["fields"] = fields

    var queryStructNames []string
    append(queryStructNames, '0'),

    u, err := url.Parse(client.internal.Parser.Url("/2/users/:user_id/bookmarks", pathParams))
    if err != nil {
        return TweetCollectionResponse{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return TweetCollectionResponse{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TweetCollectionResponse{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return TweetCollectionResponse{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response TweetCollectionResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TweetCollectionResponse{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TweetCollectionResponse{}, errors.New("the server returned an unknown status code")
    }
}

// Create 
func (client *BookmarkTag) Create(userId string, payload SingleTweet) (BookmarkResponse, error) {
    pathParams := make(map[string]interface{})
    pathParams["user_id"] = userId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/2/users/:user_id/bookmarks", pathParams))
    if err != nil {
        return BookmarkResponse{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return BookmarkResponse{}, err
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return BookmarkResponse{}, err
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BookmarkResponse{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BookmarkResponse{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BookmarkResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BookmarkResponse{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return BookmarkResponse{}, errors.New("the server returned an unknown status code")
    }
}

// Delete 
func (client *BookmarkTag) Delete(userId string, tweetId string) (BookmarkResponse, error) {
    pathParams := make(map[string]interface{})
    pathParams["user_id"] = userId
    pathParams["tweet_id"] = tweetId

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/2/users/:user_id/bookmarks/:tweet_id", pathParams))
    if err != nil {
        return BookmarkResponse{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("DELETE", u.String(), nil)
    if err != nil {
        return BookmarkResponse{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return BookmarkResponse{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return BookmarkResponse{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var response BookmarkResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return BookmarkResponse{}, err
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return BookmarkResponse{}, errors.New("the server returned an unknown status code")
    }
}



func NewBookmarkTag(httpClient *http.Client, parser *sdkgen.Parser) *BookmarkTag {
	return &BookmarkTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
